// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 effective-4.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name AppBoxoSDK
import AVFoundation
@_exported import AppBoxoSDK
import CoreGraphics
import CoreLocation
import CoreMotion
import Foundation
import MapKit
import SafariServices
import Swift
import UIKit
import WebKit
@objc(MiniAppConfig) public class MiniAppConfig : ObjectiveC.NSObject {
  @objc public var color: AppBoxoSDK.MiniAppColor?
  @objc required public init(color: AppBoxoSDK.MiniAppColor? = nil)
  @objc public func setColor(color: AppBoxoSDK.MiniAppColor)
  @objc deinit
  @objc override dynamic public init()
}
@objc(MiniAppColor) public class MiniAppColor : ObjectiveC.NSObject, Swift.Codable {
  @objc public var primaryColor: Swift.String?
  @objc public var secondaryColor: Swift.String?
  @objc public var tertiaryColor: Swift.String?
  @objc(initWithPrimary:secondary:tertiary:) required public init(primary: Swift.String, secondary: Swift.String, tertiary: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(Config) public class Config : ObjectiveC.NSObject {
  @objc(initWithClientId:) required public init(clientId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc(AppBoxo) public class AppBoxo : ObjectiveC.NSObject {
  @objc public static let shared: AppBoxoSDK.AppBoxo
  @objc required public init(config: AppBoxoSDK.Config)
  @objc(setConfig:) public func setConfig(config: AppBoxoSDK.Config)
  @objc(getConfig) public func getConfig() -> AppBoxoSDK.Config
  @objc(getMiniAppWithAppId:authPayload:additionalUserFields:data:) public func getMiniApp(appId: Swift.String, authPayload: Swift.String = "", additionalUserFields: [Swift.String : Any]? = nil, data: [Swift.String : Any]? = nil) -> AppBoxoSDK.MiniApp
  @objc(getMiniAppWithAppId:authPayload:additionalUserFields:) public func getMiniApp(appId: Swift.String, authPayload: Swift.String = "", additionalUserFields: [Swift.String : Any]? = nil) -> AppBoxoSDK.MiniApp
  @objc(getMiniAppWithAppId:authPayload:data:) public func getMiniApp(appId: Swift.String, authPayload: Swift.String = "", data: [Swift.String : Any]? = nil) -> AppBoxoSDK.MiniApp
  @objc(getMiniAppWithAppId:authPayload:) public func getMiniApp(appId: Swift.String, authPayload: Swift.String = "") -> AppBoxoSDK.MiniApp
  @objc(getMiniAppWithAppId:) public func getMiniApp(appId: Swift.String) -> AppBoxoSDK.MiniApp?
  @objc(hideAllMiniApps) public func hideAllMiniApps()
  @objc(logout) public func logout()
  @objc(destroyAppId:) public func destroy(appId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc(MiniAppDelegate) public protocol MiniAppDelegate {
  @objc optional func didReceiveCustomEvent(miniApp: AppBoxoSDK.MiniApp, params: [Swift.String : Any])
  @objc(onLaunchMiniApp:) optional func onLaunch(miniApp: AppBoxoSDK.MiniApp)
  @objc(onResumeMiniApp:) optional func onResume(miniApp: AppBoxoSDK.MiniApp)
  @objc(onPauseMiniApp:) optional func onPause(miniApp: AppBoxoSDK.MiniApp)
  @objc(onCloseMiniApp:) optional func onClose(miniApp: AppBoxoSDK.MiniApp)
  @objc(onErrorMiniApp:message:) optional func onError(miniApp: AppBoxoSDK.MiniApp, message: Swift.String)
}
@objc(MiniApp) public class MiniApp : ObjectiveC.NSObject {
  @objc public var appId: Swift.String
  @objc public var authPayload: Swift.String
  @objc public var additionalUserFields: [Swift.String : Any]?
  @objc public var data: [Swift.String : Any]?
  @objc public var delegate: AppBoxoSDK.MiniAppDelegate?
  @objc public var config: AppBoxoSDK.MiniAppConfig?
  @objc(initWithAppId:authPayload:additionalUserFields:data:) required public init(appId: Swift.String, authPayload: Swift.String = "", additionalUserFields: [Swift.String : Any]? = nil, data: [Swift.String : Any]? = nil)
  @objc(initWithAppId:authPayload:data:) convenience public init(appId: Swift.String, authPayload: Swift.String = "", data: [Swift.String : Any]? = nil)
  @objc(openWithViewController:) public func open(viewController: UIKit.UIViewController)
  @objc(sendEventWithParams:) public func sendEvent(params: [Swift.String : Any])
  @objc(close) public func close()
  @objc(setConfigWithConfig:) public func setConfig(config: AppBoxoSDK.MiniAppConfig?)
  @objc override dynamic public init()
  @objc deinit
}
