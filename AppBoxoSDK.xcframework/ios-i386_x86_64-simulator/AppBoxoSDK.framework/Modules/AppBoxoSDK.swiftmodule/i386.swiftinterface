// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 effective-4.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name AppBoxoSDK
import AVFoundation
@_exported import AppBoxoSDK
import CoreGraphics
import CoreLocation
import CoreMotion
import Foundation
import MapKit
import SafariServices
import Swift
import UIKit
import WebKit
@objc(MiniappConfig) public class MiniappConfig : ObjectiveC.NSObject {
  @objc public var color: AppBoxoSDK.MiniappColor?
  public var theme: AppBoxoSDK.Theme?
  @objc(initWithTheme:) convenience public init(theme: AppBoxoSDK.Theme)
  @objc(initWithColor:) convenience public init(color: AppBoxoSDK.MiniappColor)
  @objc(initWithColor:theme:) required public init(color: AppBoxoSDK.MiniappColor?, theme: AppBoxoSDK.Theme)
  @objc public func setColor(color: AppBoxoSDK.MiniappColor)
  @objc deinit
  @objc override dynamic public init()
}
@objc(MiniappColor) public class MiniappColor : ObjectiveC.NSObject, Swift.Codable {
  @objc public var primaryColor: Swift.String?
  @objc public var secondaryColor: Swift.String?
  @objc public var tertiaryColor: Swift.String?
  @objc(initWithPrimary:secondary:tertiary:) required public init(primary: Swift.String, secondary: Swift.String, tertiary: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(Theme) public enum Theme : Swift.Int {
  case Dark = 0
  case Light = 1
  case System = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(Config) public class Config : ObjectiveC.NSObject {
  @objc(initWithClientId:) convenience public init(clientId: Swift.String)
  @objc(initWithClientId:theme:) required public init(clientId: Swift.String, theme: AppBoxoSDK.Theme)
  @objc override dynamic public init()
  @objc deinit
}
@objc(Appboxo) public class Appboxo : ObjectiveC.NSObject {
  @objc public static let shared: AppBoxoSDK.Appboxo
  @objc required public init(config: AppBoxoSDK.Config)
  @objc(setConfig:) public func setConfig(config: AppBoxoSDK.Config)
  @objc(getConfig) public func getConfig() -> AppBoxoSDK.Config
  @objc(getMiniappWithAppId:authPayload:additionalUserFields:data:) public func getMiniapp(appId: Swift.String, authPayload: Swift.String = "", additionalUserFields: [Swift.String : Any]? = nil, data: [Swift.String : Any]? = nil) -> AppBoxoSDK.Miniapp
  @objc(getMiniappWithAppId:authPayload:additionalUserFields:) public func getMiniapp(appId: Swift.String, authPayload: Swift.String = "", additionalUserFields: [Swift.String : Any]? = nil) -> AppBoxoSDK.Miniapp
  @objc(getMiniappWithAppId:authPayload:data:) public func getMiniapp(appId: Swift.String, authPayload: Swift.String = "", data: [Swift.String : Any]? = nil) -> AppBoxoSDK.Miniapp
  @objc(getMiniappWithAppId:authPayload:) public func getMiniapp(appId: Swift.String, authPayload: Swift.String = "") -> AppBoxoSDK.Miniapp
  @objc(getMiniappWithAppId:) public func getMiniapp(appId: Swift.String) -> AppBoxoSDK.Miniapp?
  @objc(hideMiniapps) public func hideMiniapps()
  @objc(logout) public func logout()
  @objc(destroyAppId:) public func destroy(appId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc(MiniappDelegate) public protocol MiniappDelegate {
  @objc optional func didReceiveCustomEvent(miniapp: AppBoxoSDK.Miniapp, params: [Swift.String : Any])
  @objc(onLaunchMiniapp:) optional func onLaunch(miniapp: AppBoxoSDK.Miniapp)
  @objc(onResumeMiniapp:) optional func onResume(miniapp: AppBoxoSDK.Miniapp)
  @objc(onPauseMiniapp:) optional func onPause(miniapp: AppBoxoSDK.Miniapp)
  @objc(onCloseMiniapp:) optional func onClose(miniapp: AppBoxoSDK.Miniapp)
  @objc(onErrorMiniapp:message:) optional func onError(miniapp: AppBoxoSDK.Miniapp, message: Swift.String)
}
@objc(Miniapp) public class Miniapp : ObjectiveC.NSObject {
  @objc public var appId: Swift.String
  @objc public var authPayload: Swift.String
  @objc public var additionalUserFields: [Swift.String : Any]?
  @objc public var data: [Swift.String : Any]?
  @objc public var delegate: AppBoxoSDK.MiniappDelegate?
  @objc public var config: AppBoxoSDK.MiniappConfig?
  @objc(initWithAppId:authPayload:additionalUserFields:data:) required public init(appId: Swift.String, authPayload: Swift.String = "", additionalUserFields: [Swift.String : Any]? = nil, data: [Swift.String : Any]? = nil)
  @objc(initWithAppId:authPayload:data:) convenience public init(appId: Swift.String, authPayload: Swift.String = "", data: [Swift.String : Any]? = nil)
  @objc(openWithViewController:) public func open(viewController: UIKit.UIViewController)
  @objc(sendEventWithParams:) public func sendEvent(params: [Swift.String : Any])
  @objc(close) public func close()
  @objc(setConfigWithConfig:) public func setConfig(config: AppBoxoSDK.MiniappConfig?)
  @objc override dynamic public init()
  @objc deinit
}
extension AppBoxoSDK.Theme : Swift.Equatable {}
extension AppBoxoSDK.Theme : Swift.Hashable {}
extension AppBoxoSDK.Theme : Swift.RawRepresentable {}
